name: Release

on:
  workflow_dispatch

jobs:
  build:
    name: "Release"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
    - name: Declare some variables
      id: vars
      shell: bash
      run: |
        echo "::set-output name=sha_short::$(git rev-parse --short $GITHUB_SHA)"
    - name: Export Client Curse Pack
      shell: bash
      run: |
        chmod +x ./packwiz
        ./packwiz curseforge export -o client.zip
        ./packwiz list > modlist.txt
        mkdir -p ./buildOut/
        mv ./modlist.txt ./buildOut/
        mv ./client.zip ./buildOut/
    - name: Bootstrap
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '8'
    - name: Install requests
      run: |
        pip install requests
    - run: python build/download.py
    - name: Download
      shell: bash
      run: |
        serverPack="server.zip"
        cp LICENSE build/server/

        cd build/server
        java -jar packwiz-installer-bootstrap.jar ../../pack.toml

        zip -r $serverPack config
        zip -r $serverPack groovy
        zip -r $serverPack libraries
        zip -r $serverPack mods
        zip -r $serverPack structures

        zip -m $serverPack launch.sh
        zip -m $serverPack forge-1.12.2-14.23.5.2860.jar
        zip -m $serverPack LICENSE
        zip -m $serverPack minecraft_server.1.12.2.jar

        cd ../..

        mv build/server/$serverPack buildOut/$serverPack
    - uses: actions/setup-node@v4
      with:
        node-version: 'latest'
    - run: npm install @iarna/toml
    - id: get-version
      uses: actions/github-script@v7
      with:
            result-encoding: string
            script: |
                try {
                    const fs = require('fs')
                    const toml = require('@iarna/toml')
                    const tomlString = fs.readFileSync('./pack.toml')
                    var apps = toml.parse(tomlString)
                    return apps.version
                } catch(err) {
                    core.error("Error while reading or parsing the TOML")
                    core.setFailed(err)
                }
    - run: echo "${{steps.get-version.outputs.result}}"

    - name: Rename file 
      run: |
        mv buildOut/client.zip buildOut/supersymmetry-${{steps.get-version.outputs.result}}.zip
        mv buildOut/server.zip buildOut/server-${{steps.get-version.outputs.result}}.zip
        rm -f buildOut/client.zip
        rm -f buildOut/server.zip

    - name: Automatic Releases
      uses: marvinpinto/action-automatic-releases@latest
      with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ steps.get-version.outputs.result }}
          prerelease: false
          title: ${{ steps.get-version.outputs.result }}
          files: |
            buildOut/supersymmetry-${{steps.get-version.outputs.result}}.zip
            buildOut/server-${{steps.get-version.outputs.result}}.zip
            buildOut/modlist.txt
    
